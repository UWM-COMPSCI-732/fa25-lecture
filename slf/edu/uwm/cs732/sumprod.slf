package edu.uwm.cs732;

terminals unit value
          Unit in fn inl inr of X
          if then else true false Bool
          let

module Nat = org.sasylf.util.Natural

syntax l = Nat.n

judgment labelne = Nat.notequal : l <> l 

syntax

t ::= unit
  | fn x:T => t[x]
  | x
  | t t
  | inl t
  | inr t
  | case t of inl x1 => t[x1] "|" inr x2 => t[x2]
  | <t,t> // EXTRA
  | t@1   // (ditto)
  | t@2   // (ditto)
  | let x=t in t[x]
  | { r }
  | t.l

r ::= l=t, r
   | .
   
// we encode the "if" sublanguage using sums:
true := inl unit
false := inr unit
(if t1 then t2 else t3) := (case t1 of inl x1 => t2 | inr x2 => t3)


T ::= Unit
  | T -> T
  | T X T  // EXTRA
  | T + T
  | { R }
  
R ::= l:T, R
   | .

// And this is the Bool type:
Bool := Unit + Unit


Gamma ::= *
      | Gamma, x : T



judgment equal: t == t

------ eq
t == t


judgment isavalue: t value


---------- val-unit
unit value

-------------------- val-fn
fn x:T => t[x] value

r value
------------ val-rec
{ r } value

judgment recisavalue: r value

------- val-rec-empty
. value


t value
r value
------------ val-rec-more
l=t, r value

// TODO: Add new value judgments for sums
// EXTRA: Add value judgment(s) for products

// test adequacy by proving these lemmas:
lemma val-true:
    exists true value
    proof by unproved
end lemma

lemma val-false:
    exists false value
    proof by unproved
end lemma


judgment eval: t -> t

t1 -> t1'
--------------- E-App1
t1 t2 -> t1' t2

t1 value
t2 -> t2'
--------------- E-App2
t1 t2 -> t1 t2'

t2 value
------------------------------ E-AppAbs
(fn x:T => t1[x]) t2 -> t1[t2]

t1 value
---------------------------- E-LetV
let x = t1 in t2[x] -> t2[t1]

t1 -> t1'
----------------------------------- E-Let
let x=t1 in t2[x] -> let x=t1' in t2[x]

r -> r'
--------------------- E-Rec
{ r } -> { r' }

r value
r@l = t
----------------- E-Sel
{r}.l -> t

judgment evalrec: r -> r

t -> t'
------------------ E-Rec1
l=t, r -> l=t', r

t value
r -> r'
----------------- E-Rec2
l=t, r -> l=t, r'

judgment lookup: r@l = t

---------------- lookup-here
(l=t, r)@l = t

l <> l'
r@l' = t'
-------------------- lookup-there
(l=t,r)@l' = t'

// TODO: Add evaluation rules for sums
// EXTRA: Add evaluation rules for products


// test adequacy by proving these lemmas:

lemma E-If:
    forall e1: t1 -> t1'
    forall t2
    forall t3
    exists if t1 then t2 else t3 -> if t1' then t2 else t3
    proof by unproved // TODO
end lemma

lemma E-IfTrue:
    forall t2
    forall t3
    exists if true then t2 else t3 -> t2
    proof by unproved // TODO
end lemma

lemma E-IfFalse:
    forall t2
    forall t3
    exists if false then t2 else t3 -> t3
    proof by unproved // TODO
end lemma


judgment isvar: t : T in Gamma
assumes Gamma

----------------------- var
x : T in (Gamma, x : T)


judgment type: Gamma |- t : T
assumes Gamma

-------------------- T-Unit
Gamma |- unit : Unit

t : T in Gamma
-------------- T-Var
Gamma |- t : T

Gamma, x : T1 |- t[x] : T2
------------------------------------- T-Abs
Gamma |- (fn x:T1 => t[x]) : T1 -> T2

Gamma |- t1 : T2 -> T1
Gamma |- t2 : T2
----------------------- T-App
Gamma |- t1 t2 : T1

Gamma |- t1 : T1
Gamma, x:T1 |- t2[x] : T2
---------------------- T-Let
Gamma |- let x = t1 in t2[x] : T2

Gamma |- r : R
--------------------------- T-Rec
Gamma |- { r } : { R }

Gamma |- t : { R }
R@l = T
---------------------- T-Sel
Gamma |- t . l : T

judgment typerec: Gamma |- r : R
assumes Gamma

---------------- T-Rec-Empty
Gamma |- . : .

Gamma |- t : T
Gamma |- r : R
------------------------- T-Rec-NonEmpty
Gamma |- (l=t,r) : l:T, R
    
judgment Lookup: R@l = T

---------------- Lookup-here
(l:T, R)@l = T

l <> l'
R@l' = T'
-------------------- Lookup-there
(l:T,R)@l' = T'

lemma let-adequate:
    exists * |- let x = unit in x : Unit
    d1: * |- unit : Unit by rule T-Unit
    v : x:Unit in (*, x:Unit) by rule var
    d2: *, x:Unit |- x : Unit by rule T-Var on v
    proof by rule T-Let on d1, d2
end lemma
     
// TODO: Add the new type rules for sum types
// EXTRA: add new type rules for for product types
//   Don't do the EXTRA part until everything else works

// Test adequacy by proving these lemmas

lemma T-If: assumes Gamma
    forall d1: Gamma |- t1 : Bool
    forall d2: Gamma |- t2: T
    forall d3: Gamma |- t3: T
    exists Gamma |- if t1 then t2 else t3 : T
    proof by unproved // TODO
end lemma

// This lemma tests everything together: type and evaluation rules
lemma test:
    forall e: t == (fn x:Unit + (Unit->Unit) => case x of inl x1 => x1 | inr x2 => (x2(unit))) (inr (fn x3:Unit => x3))
    exists * |- t : Unit and t -> t' and t' -> t'' and t'' -> unit .
    proof by unproved // TODO
end lemma
    

lemma canonical-forms-Unit:
    forall d: * |- t : Unit
    forall v: t value
    exists t == unit.
    // get rid of T-Var
    do case analysis on d:
        case rule
            var: t : Unit in *
            ------------------- T-Var
            _: * |- t : Unit
        is
            proof by contradiction on var
        end case
    end case analysis
    proof by case analysis on v:
        case rule
            -------------------------- val-fn
            _: (fn x : T1 => t1[x]) value
            where t := fn x : T1 => t1[x]
        is
            proof by contradiction on d
        end case
 
        case rule
            --------------------- val-unit
            _: unit value
            where t := unit
        is
            _: t == unit by rule eq
        end case
        // TODO: cases for new forms of values
    end case analysis
end lemma

lemma canonical-forms-Arrow:
    forall d: * |- t : T1 -> T2
    forall v: t value
    exists t == fn x:T1 => t2[x].
    // get rid of T-Var
    do case analysis on d:
        case rule
            var: t : T1->T2 in *
            ------------------- T-Var
            _: * |- t : T1 -> T2
        is
            proof by contradiction on var
        end case
    end case analysis
    proof by case analysis on v:
        case rule
            -------------------------- val-fn
            _: (fn x : T0 => t2[x]) value
            where t := fn x : T0 => t2[x]
        is
            proof by case analysis on d:
                case rule
                    _: *, x : T1 |- t2[x] : T2
                    ------------------------------------------- T-Abs
                    _: * |- (fn x : T1 => t2[x]) : T1 -> T2
                    where T0 := T1
                is
                    proof by rule eq
                end case

            end case analysis
        end case
        case rule
            --------------------- val-unit
            _: unit value
            where t := unit
        is
            proof by contradiction on d
        end case
        // TODO: case for new value forms (copy and paste from previous lemma)
    end case analysis
end lemma  
  
// EXTRA: Canonical forms lemma for product types      

lemma canonical-forms-Sum:
    forall d: * |- t : T1 + T2
    forall v: t value
    exists (t == inl t' or t == inr t') and t' value .
    proof by unproved // TODO
end lemma  

  
// Theorem 9.3.5
theorem progress :
    forall d: * |- t : T
    exists t value or t -> t' .
    proof by induction on d:
        case rule
            d1: * |- t1 : T1
            d2: *, x : T1 |- t2[x] : T
            ---------------------------- T-Let
            _: * |- (let x = t1 in t2[x]) : T
            where t := let x = t1 in t2[x] 
        is
            o1: t1 value or t1 -> t1' by induction hypothesis on d1
            _: t -> t' by case analysis on o1:
                case or v1: t1 value is
                    proof by rule E-LetV on v1
                end case

                case or e1: t1 -> t1' is
                    proof by rule E-Let on e1
                end case

            end case analysis
        end case

        case rule
            ------------------ T-Unit
            _: * |- unit : Unit
            where t := unit and T := Unit
        is
            v: unit value by rule val-unit
        end case

        case rule
            v: t : T in *
            ------------- T-Var
            _: * |- t : T
        is
            proof by contradiction on v
        end case

        case rule
            d1: *, x:T1 |- t1[x] : T2
            ------------------------------------ T-Abs
            _ : * |- fn x:T1 => t1[x] : T1 -> T2
            where t := fn x:T1 => t1[x]
            and T := T1 -> T2
        is
            v : fn x:T1 => t1[x] value by rule val-fn
        end case

        case rule
            d1: * |- t1 : T2 -> T
            d2: * |- t2 : T2
            ---------------------- T-App
            _: * |- t1 t2 : T
            where t := t1 t2
        is
            ns1: t1 value or t1 -> t1' by induction hypothesis on d1
            ns2: t2 value or t2 -> t2' by induction hypothesis on d2
            _: t1 t2 -> t' by case analysis on ns1:
                case or e1: t1 -> t1' is
                    e: t1 t2 -> t1' t2 by rule E-App1 on e1
                end case
                case or v1: t1 value is
                    proof by case analysis on ns2:
                        case or e2: t2 -> t2' is
                            e: t1 t2 -> t1 t2' by rule E-App2 on v1,e2
                        end case
                        case or v2: t2 value is
                            c: t1 == fn x:T2 => t11[x] by lemma canonical-forms-Arrow on d1,v1
                            use inversion of rule eq on c where t1 := fn x:T2 => t11[x]
                            proof by rule E-AppAbs on v2
                        end case
                    end case analysis
                end case
            end case analysis
        end case

        // TODO: complete proof for sum types
        // EXTRA: complete proof by product types
    end induction
end theorem


lemma subst :
    assumes Gamma
    forall d1: Gamma, x : T2 |- t1[x] : T1
    forall d2: Gamma |- t2 : T2
    exists Gamma |- t1[t2] : T1 .
    _ : Gamma |- t1[t2] : T1 by induction on d1:
        case rule
            d11: Gamma, x:T2 |- t11[x] : T11
            d12: Gamma, x:T2, x':T11 |- t12[x][x'] : T1
            -------------------------------------------------------- T-Let
            _: Gamma, x : T2 |- (let x' = t11[x] in t12[x][x']) : T1
            where t1[x] := let x' = t11[x] in t12[x][x']
        is
            d11': Gamma |- t11[t2] : T11 by induction hypothesis on d11, d2
            d12r: Gamma, x':T11, x:T2 |- t12[x][x'] : T1 by exchange on d12
            d2w:  Gamma, x':T11 |- t2 : T2 by weakening on d2
            d12': Gamma, x':T11 |- t12[t2][x'] : T1 by induction hypothesis on d12r, d2w
            proof by rule T-Let on d11', d12'
        end case


        case rule
            ------------------------------- T-Unit
            _: Gamma, x : T2 |- unit : Unit
            where t1[x] := unit and T1 := Unit
        is
            _: Gamma |- unit : Unit by rule T-Unit
        end case

        case rule
            v: t1[x] : T1 in (Gamma, x:T2)
            ------------------------------- T-Var
            _: Gamma, x:T2 |- t1[x] : T1
        is
            _: Gamma |- t1[t2] : T1 by case analysis on v:
                case rule
                    ------------------------ var
                    _: x:T2 in (Gamma, x:T2)
                    where t1[x] := x and T1 := T2
                is
                    _: Gamma |- t2 : T2 by d2
                end case
                case rule
                    --------------------------------- var
                    _: x':T1 in (Gamma', x':T1, x:T2)
                is
                    v': x':T1 in (Gamma', x':T1) by rule var
                    _: Gamma', x':T1 |- x':T1 by rule T-Var on v'
                end case
            end case analysis
        end case

        case rule
            d11: Gamma, x : T2, x' : T2' |- t11[x][x'] : T1'
            ------------------------------------------------------------ T-Abs
            _  : Gamma, x : T2 |- (fn x':T2' => t11[x][x']) : T2' -> T1'
            where t1[x] := fn x':T2' => t11[x][x']
            and T1 := T2' -> T1'
        is
            d11r : Gamma, x' : T2', x : T2 |- t11[x][x'] : T1' 
            by exchange on d11
            d2' : Gamma, x' : T2' |- t2 : T2
            by weakening on d2
            d11': Gamma, x' : T2' |- t11[t2][x'] : T1' 
            by induction hypothesis on d11r,d2'
            _: Gamma |- (fn x':T2' => t11[t2][x']) : T2' -> T1' 
            by rule T-Abs on d11'    
        end case

        case rule
            d11: Gamma, x : T2 |- t11[x] : T12 -> T1
            d12: Gamma, x : T2 |- t12[x] : T12
            --------------------------------------- T-App
            _  : Gamma, x : T2 |- t11[x] t12[x] : T1
            where t1[x] := t11[x] t12[x]
        is
            d11': Gamma |- t11[t2] : T12 -> T1 by induction hypothesis on d11,d2
            d12': Gamma |- t12[t2] : T12 by induction hypothesis on d12,d2
            _   : Gamma |- t11[t2] t12[t2] : T1 by rule T-App on d11',d12'
        end case

        // TODO: Everything is easy induction EXCEPT for T-Case,
        // which is a mess of induction, weakening and exchange.
        // EXTRA: Product types are easy to add
    end induction
end lemma


// Theorem 9.3.9
theorem preservation :
    forall d: * |- t : T
    forall e: t -> t'
    exists * |- t' : T .
    _ : * |- t' : T by induction on d:
        case rule
            d1: * |- t1 : T1
            d2: *, x:T1 |- t2[x] : T
            ---------------------------- T-Let
            _: * |- (let x = t1 in t2[x]) : T
            where t := let x = t1 in t2[x]
        is
            proof by case analysis on e:
                case rule
                    v1: t1 value
                    ---------------------------------- E-LetV
                    _: (let x = t1 in t2[x]) -> t2[t1]
                    where t' := t2[t1]
                is
                    proof by lemma subst on d2, d1
                end case

                case rule
                    e1: t1 -> t1'
                    ----------------------------------------- E-Let
                    _: (let x = t1 in t2[x]) -> (let x = t1' in t2[x])
                    where t' := let x=t1' in t2[x]
                is
                    d1': * |- t1' : T1 by theorem preservation on d1, e1
                    proof by rule T-Let on d1', d2 
                end case

            end case analysis
        end case

        case rule
            ----------------------- T-Unit
            _: * |- unit : Unit
            where t := unit and T := Unit
        is
            _: * |- t' : Unit by case analysis on e:
            end case analysis
        end case

        case rule
            v: t : T in *
            ----------------- T-Var
            _: * |- t : T
        is
            _: * |- t' : T by contradiction on v
        end case

        case rule
            _: *, x : T1 |- t1[x] : T2
            ---------------------------------------- T-Abs
            _: * |- (fn x:T1 => t1[x]) : T1 -> T2
            where t := fn x:T1 => t1[x] and T := T1 -> T2
        is
            _: * |- t' : T by contradiction on e
        end case

        case rule
            d1: * |- t1 : T2 -> T1
            d2: * |- t2 : T2
            --------------------------- T-App
            _ : * |- t1 t2 : T1
            where t := t1 t2 and T := T1
        is
            _: * |- t' : T by case analysis on e:
                case rule
                    e1: t1 -> t1'
                    ------------------- E-App1
                    _ : t1 t2 -> t1' t2
                    where t' := t1' t2
                is
                    d1': * |- t1' : T2 -> T1 
                    by induction hypothesis on d1,e1
                    _  : * |- t1' t2 : T1 by rule T-App on d1',d2
                end case
                case rule
                    _ : t1 value
                    e2: t2 -> t2'
                    ------------------- E-App2
                    _ : t1 t2 -> t1 t2'
                    where t' := t1 t2'
                is
                    d2': * |- t2' : T2
                    by induction hypothesis on d2,e2
                    _  : * |- t1 t2' : T1 by rule T-App on d1,d2'
                end case
                case rule
                    _: t2 value
                    ------------------------------------- E-AppAbs
                    _: (fn x:T2' => t11[x]) t2 -> t11[t2]
                    where t1 := fn x:T2' => t11[x]
                    and t' := t11[t2]
                is
                    proof by case analysis on d1:
                        case rule
                            v1: (fn x : T2' => t11[x]) : (T2 -> T1) in *
                            ------------------------------------------ T-Var
                            _: * |- (fn x : T2' => t11[x]) : (T2 -> T1)
                        is
                            proof by contradiction on v1
                        end case

                        case rule
                            d11: (*, x : T2') |- t11[x] : T1
                            ------------------------------------------- T-Abs
                            _: * |- (fn x : T2 => t11[x]) : (T2 -> T1)
                            where T2' := T2
                        is
                            proof by lemma subst on d11, d2
                        end case

                    end case analysis
                end case
            end case analysis
        end case
        // TODO: complete the proof with sum types
        // EXTRA: add product types too
    end induction
end theorem


