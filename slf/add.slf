// default package

terminals S

syntax 
   n ::= 0 | S n
   
   1 := S 0
   2 := S S 0
   3 := S 2
   4 := S 3
   
judgment equal: n = n

    ------ eq
     n = n

lemma succ_functional:
    forall e: n1 = n2
    exists S n1 = S n2
    use inversion on e
    where n1 := n2
    proof by rule eq
end lemma

judgment add: n + n = n

     --------- add-zero
     0 + n = n
     
     n1 + n2 = n3
     ----------------- add-succ
     S n1 + n2 = S n3
  
lemma two+two-is-four:
    exists 2 + 2 = 4
    y: 0 + 2 = 2 by rule add-zero
    x: 1 + 2 = 3 by rule add-succ on y
    proof by rule add-succ on x
end lemma
         
lemma add-right-zero:
    forall n
    exists n + 0 = n
    proof by induction on n:
        case 0 is
            proof by rule add-zero
        end case
        case S n' is
            miracle: n' + 0 = n' by induction hypothesis on n'
            proof by rule add-succ on miracle
        end case
    end induction
end lemma

theorem add-commutative:
    forall d: n1 + n2 = n3
    exists n2 + n1 = n3
    do case analysis on d:
        case rule
            -------------- add-zero
            _: 0 + n2 = n2
            where n1 := 0
            and n3 := n2
        is
            proof by lemma add-right-zero on n2
        end case
    end case analysis
    proof by unproved
end theorem

theorem add-is-a-function:
    forall d: n1 + n2 = n3
    forall d': n1 + n2 = n3'
    exists n3 = n3'
    proof by induction on d:
        case rule
            ---------------- add-zero
            _: 0 + n2 = n2
            where n1 := 0
              and n3 := n2
        is
            use inversion on d'
            where n2 := n3'
            proof by rule eq
        end case
        case rule
            e: n11 + n2 = n31
            --------------------- add-succ
            _: S n11 + n2 = S n31
            where n1 := S n11
              and n3 := S n31
        is
            e': n11 + n2 = n32 by inversion of rule add-succ on d'
            where n3' := S n32
            m: n31 = n32 by theorem add-is-a-function on e, e'
            proof by lemma succ_functional on m
        end case
    end induction
end theorem


judgment not_equal: n <> n

// !! NOT ADEQUATE

   --------- ne-z-s
   0 <> S n
   
   n <> n'
   -------- ne-symm
   n' <> n
   
   -------- ne-succ
   n <> S n

lemma succ-preserves-ne:
    forall d: n1 <> n2
    exists S n1 <> S n2
    proof by unproved
end lemma

lemma succ-cancels-ne:
    forall d: S n1 <> S n2
    exists n1 <> n2
    proof by induction on d:
         case rule
             e: S n2 <> S n1
             ---------------- ne-symm
             _: S n1 <> S n2
         is
             e': n2 <> n1 by induction hypothesis on e
             proof by rule ne-symm on e'
         end case
         case rule
             ----------------- ne-succ
             _: S n1 <> S S n1
             where n2 := S n1
         is
             proof by rule ne-succ
         end case
     end induction
end lemma

theorem not-equal-anti-reflexive:
    forall n
    forall d: n <> n
    exists contradiction
    proof by unproved
end theorem

theorem equal-complete:
    forall n1
    forall n2
    exists n1 = n2 or n1 <> n2
    use induction on n1, n2
    proof by case analysis on n1:
        case 0 is
            proof by case analysis on n2:
                case 0 is
                    _: 0 = 0 by rule eq
                    // proof by unproved
                end case
                case S n2' is
                    _: 0 <> S n2' by rule ne-z-s
                end case
            end case analysis
        end case
        case S n1' is
            proof by case analysis on n2:
                case 0 is
                    q: 0 <> S n1' by rule ne-z-s 
                    _: S n1' <> 0 by rule ne-symm on q
                end case
                case S n2' is
                    c: n1' = n2' or n1' <> n2' by induction hypothesis on n1', n2'
                    proof by case analysis on c:
                        case or e: n1' = n2' is
                            proof by unproved
                        end case
                        case or ne: n1' <> n2' is
                            _: S n1' <> S n2' by lemma succ-preserves-ne on ne
                        end case
                    end case analysis
                end case
            end case analysis
        end case
    end case analysis
end theorem
// theorem ...

